hello everyone and welcome to the session my name is nikhil patel i'm the engineering manager on data migration team in data platform organization this evening i'm joined by my colleague paul turneja and geoff dalgas who works for stack overflow first and foremost thank you all for making it this evening i hope you all are having a great time at build certainly been a big day especially for data with the announcements around cosmos DB i hope you guys have taken that in it's amazing and support for postgres and mysql on azure platform i'm hoping that makes it that much more interesting for everyone to come use azure as a platform of choice let's go through what we are going to cover in this session we'll touch upon applications journey to cloud the cloud migration lifecycle so to speak talk about the database migration lifecycle associated when you move your application to cloud and we'll share the tools and learnings that we've been getting from our customers all along to make the journey hopefully that much more easier and manageable for all you guys we'll talk about what you can do with the apps once you've migrated to cloud and adopted the cloud database platform we'll do a hands on demo of moving an on prem enterprise app from stack overflow guys working that runs on SQL DB SQL server to SQL DB and we'll open the floor for Q and A so that's the plan let's jump in clouds becoming ubiquitous with that the need for migrating apps as a developer it becomes an essential part of our job to make this journey happen and in order to do that it's it's it's our mission so to speak to make this successful for our businesses in this new environment let's talk about the phases in which this journey takes place the first phase is the cloud assessment phase now for people in this room who are decision makers the managers people who bet your enterprise app strategy on cloud you want to know all about the total cost of ownership and return of investment you want to know all about the security and compliance given by the cloud that makes your enterprise strategy valid in cloud now for the developers in this room i'm sure the first thing that comes is hey what tools and processes are there for me to avail to make this migration happen what you want to do is get a candidate ready that fits the bill as far from TCO and ROI perspective security compliance and the tools and then jump into the POC proof of concept phase start small get build confidence with the cloud which will help you in estimating the effort you start with a smaller app you deploy it figure it out all the blockers and then make a strategy for your tens of apps or your app estate once you are confident moving a smaller app you're going to have to worry about data migration now this is the focus of our topic tonight i'll jump into this much deeper let's finish the phases once the data migration is done you have the actual app to move in this phase you are thinking about the application compatibility is the design pattern that you established for your app that runs on prem is it valid anymore in cloud what are the security aspects of authentication and authorizations that your app needs how do you do that in cloud and finally the most important question on everyone's mind with the apps is the devops what is your code agility how do you deploy how do you manage certainly the world in cloud is different when it comes to your apps running in your data center you have an ops team right perhaps right in cloud it becomes that much more difficult or different to have an ops team because cloud gives you all those abilities to do it how do you monitor how do you manage logs for example finally once you've gone through all these phases the best part is the optimization the reason why you embarked on this journey cloud gives you the autoscaling the elasticity and high availability that you would have to spend a lot of time and effort to get if you are running this on prem once you have these phases let's jump back into the data migration which is the focus of this evening stock data migration phases our customers have told us that they do this data migration in phases we've sat with them we've learned from them the first phase is the assessment phase this phase you're assessing the platform readiness right is the cloud platform the cloud database platform that you're taking is it ready to onboard your database or your data assets what are the migration blockers for example what are the feature gaps that are available that you you have to overcome in order to make this journey happen and then you want to assess the platform for scale and perf you would be surprised many times your your database may not perform as well as you would think once you've migrated to a cloud platform you would have to think about the capacity there is elasticity and high availability but there is an opposite end to that where if you don't plan it correctly it can end up costing you a lot once you've done the migrate once you've done the assessment phase it's time to migrate data in this you're performing the schema migration and the data migration once you have that you have to migrate your server objects things like certificates encryption keys logins any code packages that are needed for your app to run along with the database once all that is done there's always post migration fixes things that you need to tune up to make your app work to make your database work at bar or at better than what it was when it was on prem let's let's talk about friction the reason we are all here is because we know that cloud migration is not an easy process we know that we acknowledge that there are frictions that makes this process a dreadful one for enterprises there are enterprises who do not want to move even though there are advantages of adopting cloud we know in developer community there are plenty of frictions that causes developers to dread this process when their enterprise embarks on this journey so what are they the first and foremost is planning planning is tedious now i'm not talking about planning for one or five or ten database movements when you have a hundred four hundred or a thousand instances that you want to move how do you make the planning for such a move happen you have to think about the application reengineering that might be needed database and application tuning there might be needed you have to have deeper insights when you are thinking about betting your farm this what are those deeper insights for example compatibility issues is your database compatible with the newer platform you would be surprised that the features that run just perfectly fine in database on prem may or may not work as you're supposed to when you move to cloud your app might be using a feature that's not available in new platform and your feature regressions are a common thing if not planned for correctly all of this makes it so much harder when you have a very varied data asset deployed in your enterprise and thirdly the lack of comprehensive tools we all know people use tens of scripts now the fun with scripts is you can write to make script work for few databases but once you have a slight change in schema you're writing new ones and then you end up having tens or hundreds of scripts the version control becomes a problem right how do you how do you scale this out enterprises and developers spend inordinate inordinate amount of time in writing one off solutions to move the data you know they might work for few of their data assets but they quickly become obsolete when things change it's very very unscalable and it's unreliable because you would write a script or a service and you know unless you put in a lot of time and effort it's not going to work out in a long term all these three things we heard over and over again from small mid-size to large enterprises the patterns are very common so we said you know what let's acknowledge the problem and let's do something about it let's help our community customers and partners to do that for that i'd like to share that for the assessment and for the assessment part we've started working on our offering called data migration assistant it's available in limited release out there we've had it online i'm i'm sure some of you might know about it but it's an amazing tool it gives you rich assessment rich feature recommendation and sizing this tool is used exclusively for the planning purposes it gives you deep insights as you'll see tonight into what are the compatibility issues what are the migration blockers you'll do you'll come across when you're migrating to a target platform of your choice it pinpoints and gives guidance and the best part is it's scalable it can scale to thousands of instances if need be so this is the first part of assessment the second part which is the data movement where we write one off services or scripts to do that i'm super excited to share with you guys the azure database migration service this service is a fully managed azure service that supports both microsoft and non microsoft sources it's built for scale reliability with enterprise security and privacy in mind how about we jump into a hands-on demo to see how we can use both these offerings to make an actual migration happen tonight let me introduce jeff dalgas who works with stack overflow to share his journey about this migration so thank you very much vehil can you hear me OK as neil said my name is jeff dogus and i'm one of the very first developers for stack overflow and so during my nine years of out of developing stack overflow i've been able to work on some really interesting challenges starting with what some of the very first lines of code for the Q that power the Q and A platform all the way to running a data center in oregon that runs stack overflow about a mile away from my house i've also been credited with early on with writing code that caused the very first stack overflow exception in stack overflow i'll save the details for that for another talk on how to fail recursively recursively but you get the idea so being part of the journey of watching stack overflow come from an early early idea to what it's become today has been an absolute adventure i still love working on all aspects of stack overflow even to this day and with our team and the community that power stack overflow has never ceased to amaze me and that is all of you so even even in this build conference i'm sure there's some people that either helped someone or have been helped on stack overflow just today that's you raise your hand all right i don't have that many stickers but see me after the talk and i'll dole them out to everyone who had their hands up my current team mission right now of developing is developing the stack overflow enterprise Q and A platform so to that goal we have built the stack overflow enterprise box and we've taken everything you know and love about stack overflow dot com and packaged it in a way that allows it to run on premise using physical machines virtual machines or in azure so why azure well we sell stack overflow is a fully managed cloud solution which means we take care of deploying any fixes upgrades doing any of the troubleshooting and it's a great platform for that so having all of the azure tools available has made that entire process of our software life cycle much easier we use the same code base for stack overflow enterprises we do for stack overflow dot com so stack overflow enterprise customers directly benefit from any change made to our dev server pages to the millions of users who visit our site daily this has been no small challenge it's taken quite a bit of effort to shrink our deployment footprint optimize our features specifically for enterprise and to get our databases migrated from a standalone SQL server instance to azure SQL DB so a little background about the stack overflow enterprise architecture application is designed to be multi tenant and that engineering decision means that we host multiple Q and A sites that are all addressed using different base host addresses so when you visit stackoverflow dot com or superuser dot com or serverfault dot com you're hitting servers running the same application pool running the same code so to support this multi tenant architecture on the database side we have a single database which stores what sites are configured their state and some aggregated data about all sites and we've named that database sites E the second database we deploy is the database for storing all of the user generated Q and A content and we've named this database stack overflow EE and we require both databases in order for our application to run so for this demo we're going to focus on the tools we use to migrate our databases from standalone SQL server to azure SQL DB and we're gonna walk through the entire process of migrating these databases running stack overflow enterprise instance from on premise standalone with two databases to azure SQL DB the first step we need to take when migrating the databases to azure SQL DB is to assess if we have any significant blockers in our application around various SQL server compatibility issues or if we're using any features that may not be available in azure SQL DB we could spend hours days or even weeks doing what our favorite thing to do is which is to go ask a bunch of questions on stack overflow and earn some reputation or we could use a tool built by microsoft such a purpose called the data migration assessment tool or the DMA so why the DMA because the team at microsoft knows a whole lot about each version of SQL server all their platform compatibility requirements and the feature sets for each version and they've packaged all of this knowledge into an easy use assessment tool so let's get to the demo left talking so to show that we are running on a standalone SQL instance we'll launch stack overflow enterprise so you can see here that we have stack overflow enterprise running and we have a version that's showing the version number of the SQL server version in the footer of the page so we can right now see that we're running on an on premise SQL server twenty sixteen so let's run the data migration assistant against the stack overflow databases and see what it says pobble is going to demonstrate the power of the data migration assistant thank you jeff hello everyone my name is pavel trnka i'm a developer on data migration team i'm super excited to be here today and i want to show you how to use data migration assistant or DMA to identify all the compatibility issues with two stack overflow databases how to fix those issues and how to deploy updated schema into azure SQL database i'm running a private version of data migration assistant tool on my machine and we will begin by creating new assessment project i'll call this project move to cloud we will select our source server platform which is going to be SQL server and we have several options for the target platform for this migration i'm going to select azure SQL database now this page allows you to select several different options the first one will allow me to find out all the compatibility issues on the database schema level and the second option we'll identify all the feature gaps between on prem version of SQL server and azure database i'm gonna keep both these options selected and we will go ahead and connect to my source server running stack overflows databases i'm gonna select both databases here and at this point we are ready to go ahead and start the assessment now behind the scene we extract the schema for both databases to work through all the objects in your database tables views stored procedure everything that you might have in there and we run a set of compatibility compatibility rules to identify all the compatibility issues as you can see we already have a report generated here and there are two sections in the report the first one SQL server feature parity allow me to see all the feature gaps all the features that are not supported on the SQL azure database site the other section right here compatibility issues will allow me to see all the compatibility issues on the database schema level so let's first take a look on the feature parity report as you can see right here we have one unsupported feature detected for cross for stack overflow database this feature is cross database references which are not supported in azure SQL database DMA will give will give me all the details it will tell me what this feature where this feature was where the problem was detected which is stack overflow E database it will give me a recommendation how to solve the problem so it gives me two options i can either move the dependent table over to my stack overflow database or another option is i can use feature called elastic database database query which will allow me to achieve the same thing as the on prem version of SQL server so right now we know that we have one feature which is not supported on azure SQL database site what about compatibility issues well let's take a look we have two databases here as you can see the first database doesn't really have any compatibility issue however for stack overflow E database we have three compatibility issues detected as you can see here we have three categories of issues the first one migration blockers as the name suggests are all the issues that will block your migration if we don't fix these issues we won't be able to deploy the schema into azure SQL database the second category behavior changes are issues which will have impact on functionality on your application on functionality for your application as an example your application may have poor performance and the last one deprecated features you can think about these issues these are basically warnings if the feature if you have a dependency on feature which is going to be removed in the next version of the product your application will will be broken so what i really like about DMA is it gives me all the details about all these issues it can pinpoint every single issue for me it can give me full context about the problem and it will also give me guidance on how to fix these issues let me show you cross database queries this is a migration blocker and as as you can see here database DMA tells me that cross database references are not supported in azure database we already know that but DNA also gives me the exact location where this issue was found i know it was a function called network posts exists and this function has a reference to another database sites EE database um and that's the that's the that's the place where the problem is coming from so now i know exactly where to go to fix this issue now the question is how do i fix this issue while DMA gives me a recommendation i can either move the table over to my database which is one option or i can use feature called elastic database query now if you are not familiar with elastic database query DMA will give you all the guidance on how to use this feature and you can follow this link where you will find a lot of examples to address these issues step by step one big issue under behavior changes category DNA tells me that i'm using an old style syntax where i'm joining two tables using the where clause let me make this a little bit bigger actually i'll do it this way it's right here i have two tables and i'm joining them using the where clause this is not recommended in tax for joints so let's take a look where this issue is coming from while DNA tells me it's the export veggies view it gives me exactly the line number where i need to go to to address this issue and the recommendation is to replace the old syntax with the new inner join explicit joint syntax the last example is deprecated under deprecated features category dma tells me that one of my tables sites events has a column called message which uses deprecated data type text and the recommendation is to replace text with varchar or nvarchar so now we know all the compatibility issues with stack overflow database and i want to show you how to fix all these issues now for migration to succeed we don't really have to fix all compatibility issues we just need to fix migration blockers but it's definitely good practice to address these issues to address all these issues in all three categories for instance if you don't fix unqualified joints issue your application will likely have a poor performance so it has definitely functionality impact on your application if you don't fix issues under deprecated features category you will very likely have to revisit your application later on when these features are removed so i want to show you how to fix all these issues to do that we will go through these steps right here post assessment step which will allow me to generate a deployment script fix the issues in the script and deploy the schema to azure SQL database i'm running a private version of DMA on my machine which allows me to go through these steps and this version will be publicly available by the end of this month if you download ma today you will only see first three steps now before we start let me ask you how many of you have already tried to migrate database on prem database to azure SQL database OK maybe ten percent and please raise your hands if it was a straightforward experience OK maybe one one one hand so from my experience if you do not have any compatibility issues in your database it should be fairly straightforward you can use tools like management studio which allows you to generate the deck pack and then you can deploy the deck peg to azure SQL database but what do you do when you have compatibility issues in your database the generation would fail and then the migration becomes more difficult and that's exactly where DMA will help you out so let me show you we have two databases here sites E which has zero compatibility issue and stack overflow with three compatibility issues i wanna start with no issue database first and then we will come back to this page and i will show you the stack overflow database second so let's review the schema of this database real quick as you can see here we have one SQL assembly in this database we have one stored procedure we have roughly fifty tables and several user defined function now this page allows you to select only a subset of these objects for migration you can imagine that if you have too many compatibility issues in your database it may become you may want to address migration blockers first and come back and address all the other issues in the other categories later on like do the data schema migration in several phases and this is exactly what this page allows you to do however for my migration i'll just keep all the objects selected and we will go ahead and generate deployment script now behind the scene we use a small scripting engine which will generate all the create statement for us and we walk the dependency graph to figure out the right order of all the statements for the deployment script to succeed as you can see we already have our deployment script generated and there are no issues here so let's review this script real quick one thing i would like to note here is we have every single statement inside if not exist check this is very helpful in order to recover from possible failures if the deployment script fails and we need to come back fix some of these issues and redeploy again this check comes very handy to avoid the collision with the existing objects so at this point we don't have any work to do there are no issues here let's go and deploy the schema to do that i need an empty azure SQL database i have already created one so let me switch over to a systems here management studio i want to double check that this database doesn't have any any objects as you can see here we don't have any tables and i can connect to my server here provide credentials select my empty database azure database and at this point the deployment script is running if it succeed if it succeeds we have successfully completed the schema migration for the first database however if it fails DMA would allow me to go back fix all the issues and rerun the script again and because we have if not exist checks for every single statement it's safe to spend as many iteration as necessary to stabilize the schema and deploy deploy the updated version as you can see the deployment is completed at this point we have zero issues here let me go back to management studio real quick and double check the schema we should see some tables yes we are good we have just completed first database now i want to go back and show you how to deploy schema for the other database this time it's going to be more interesting because we have three compatibility issues so again let's review the schema real quick this time the schema is a little bit more complex we have roughly two hundred objects in this database and as you can see here DMA will highlight all the objects which has some compatibility issues associated in this case we are looking at table site events and this table has one issue under deprecated features category and again DMA will give me all the details where this issue is coming from this is the same information that i showed you in the assessment report this is just provided in the context of each object so that you can make a better decision whether you want to exclude this object from the migration or not another example would be this user defined function network posts exists as you can see we have one migration blocker in this function and the reason is because this function has a reference to table called network posts and this table is coming from different database sites E database which is the first database that we have just migrated if we don't fix the migration blocker the deployment script would fail so this is one of the issue we have to fix and the last one is in the V export baggies view which is the unqualified joint joint syntax that i showed you earlier so for this migration i'm going to keep all the object selected including those with compatibility issues and i'll go ahead and generate a script now once this script is generated there will be a little bit of manual work to fix these compatibility issues but the DMA helps you a lot DMA will give you good ma will pinpoint every single issue for you dma will give you full context or about the problem and emma will help you by guiding you through the solution how to address these issues let me show you we can just use these buttons right here to navigate to each issue and fix it so our first issue is right here and DMA gives me full context about the problem so as you can see this issue is in table called site events this is the deprecated data type text that we have already seen before i know exactly where the problem is it is in a column called message so let me scroll down a little bit and find the problem it's right here column message is defined as text and text is deprecated so how do we fix it DMA provides recommendation to replace text with varchar max that should be easy let me go back here and change text to varchar max and we are done fixing the first issue now let's move on to the second one again dma gives me full context about the problem this time it's it is in the network posts exists function and it is a migration blocker because this function uses cross database references we know exactly where the problem is again it's because we have a reference to another database so let me find the problem right here we have an inner join to network post stable and this table is inside different database sites E database this is not supported in azure SQL database so how do we fix this problem well one option is to move the table over into our database another option would be to use feature called elastic database query now if you are not familiar with this feature it will basically allow you to define something called external table and this external table will redirect all the traffic to another database in our case it will be sites E database if you need more details we always have a link where you can go to to get familiar with this feature and follow examples there what i want to show you is i have a script written very simple script basically by following the article we can create external table like so the list of the columns for this table is going to be identical with the original table living inside database and because it's external table we need to define data source for this table and data source is nothing but the name of the database so in this case i'll say the table is in sites E database and i also need to define where this database is hosted which is my stack overflow server two i believe yes and for security reason we need to provide credential to authenticate to have access to the other database so the credential is defined right here it's just database scoped credential with user and password what i'm going to do is i'll copy this script over to DMA and i'm going to keep the credential part commented out because i have already created a valid credential with valid password in my azure database i'm not going to execute this script but i need my data source to be created as well as external table so how does it help me to fix my problem here well it's simple instead of having reference to external database we will have a reference to external table external table called network posts the table is defined right here and this table will redirect traffic to sites E database for me so we are basically done fixing the second issue and we can move on to the last one this time it's in the user defined function network posts exists actually this is the same one i need to go here yeah this is the last one unqualified joint detected in the view called we export baggies this is how the old syntax typically looks like or you are joining two tables in the where clause and the recommendation is to replace this syntax with the explicit joint syntax so let's see if we can find it down here we have two tables baggies and user two baggies and we are using where clause to join these tables the fix is very simple just replace the where clause with inner inner join on these two columns and we are done at this point we have fixed all the issues and we can go ahead and deploy the schema let me double check again my pre created database stack overflow database we do not have any tables here yet so i'm going to use this database stack overflow and deploy as you can see it's not that difficult to fix compatibility issues i mean it is a little bit of manual work yes but DMA will help you a lot DMA will pinpoint every single issue for you DMA will give you full context about the problem and emma will also help you to give you guidance on how to fix these issues also remember assessment will give you all the compatibility issues that you need to know about but it doesn't mean you have to fix them all if you have too many compatibility issues you can just focus on migration blockers first and come back and fix the other two categories later on now once this schema migration script is deployed we will be able to do data migration and with that i'm going to ask nikhil to show you how to migrate data think bubble so this is the time where we talk about the new azure database migration service schemas are deployed now it's time to migrate the data which is the phase two of our data migration journey so let's see how that happening azure data migration service is a fully managed azure service you can create an instance of the service like you would create instance of any service in azure portal you can do new and you can see that it is listed right here azure data migration service it's in limited preview you can go ahead and create the service give a name use a subscription to use and choose a network this network must be connected to your on prem network we are express router VPN and then you can go ahead and create the service for purposes of demo i've already deployed the service so let's just go back to the dashboard i have a a service deployed here this is the landing page for the service gives you essential view resource group it's created in what is the location it's created in the subscription and any project that you would have done earlier how about let's how about we go and do an actual migration let's create a migration project let's call it stomach or floor this service selects SQL server oracle and mysql as a source and it gives you an option of moving your database to azure SQL database azure SQL database managed instance which was announced just earlier in the day and azure SQL virtual machine so you have a choice depending on what platform you want to move to what we've tried to do is we've given you a simple five step process of moving your entire database here we wanted to abstract away all the complexity and just give you the bare minimal that is needed to do the job so let's go ahead and select the target two sequel art the crowds encrypt the connection and what the service is doing now is trying to connect to the SQL database in cloud and get the schema details loaded up so it knows what it's going to match up against let's connect to the source server have a source server which is an on prem SQL server that stackoverflow is running against choose SQL lot to connect with the creds and crypto connection same thing service is now connecting to on prem and it's trying to extract the databases that exist on the on prem server we have two databases stack overflow and stack overflow EE so let's try and migrate both these to azure so i'm going to map stack overflow to the schema that was deployed by powell against stack overflow and sites is the site E schema we save what service will do now is it will extract the objects on both the sides both the schemas and try to match up and give you an option of what schemas what tables you want to migrate the scenario here is you could try and consolidate tables if you wanted to on the target depending on your schema types here we found that there are a hundred and forty four objects tables in stack overflow database and fifty two all of these are selected it's mapped up if there's a schema difference the service will tell you by disabling and giving you a hint saying that hey these schemas don't match for the table let's save and let service start creating a map of what it's going to do give you a summary here's the target azure database we are going to move to from the source which is running on SQL twenty sixteen and that's it i'm going to run migration and it starts doing its job let's see what's going on here where it's created the project and it's moving i think it's about four hundred and fifty megs of the database it's going to move and it's already giving you updates fifteen of the one hundred and forty four objects are already moved it's going to give you details about each of these objects and the time how long it took and the rows all in real time this is a we've implemented a streaming pattern here just so that for people who are interested in details of how we are doing this not batch so hopefully it will be lightning fast to move terabytes of data it's there you go it's chugging along while this is happening i wanted to quickly touch base on what is going on under the cover so for the migration aspect of the data once you've done assessment and you want to migrate the service would be your go to thing we've connected to an on prem SQL server running stack overflow application we have our azure database connected up and we have a vnet that is connected to our on prem for using a VPN or express route just so that we can have eyes on the SQL server to resolve name and connect to it and whatnot we went to azure portal to create an instance of data migration service pointed to the source and target selected the schema and we moved the databases it is literally as simple as that let's check if the movement is done that's true and yeah there we go we have about four hundred and forty megs of databases all moved up jeff what do you think that looks excellent so at this point it looks like everything 's been moved all that we need to do at this point is update our connection string recycle the application pool refresh our browser and we should be able to verify that we are running on azure great let me do that i have just a script to do that change my connection string reset the IIS app pool and i think we app stack overflow app should be running excellent on azure DB how about let's just check this out here i have the app running ohh there we go excellent yeah there we go we have migrated an on prem app running on on prem SQL server twenty sixteen which had some compatibility issues we've shown how assessment and planning can help to guide you guys go make this journey of moving to azure database let us hey jeff now that the app is running what are we going to do about future proofing and how are you guys going to go make the cloud work for you well we are going to continue to use azure and we're gonna talk specifically about the cognitive services yeah so that's one aspect we are looking at some of the azure cognitive services specifically for grammar and spelling we believe that using these facilities in the azure portal will benefit all of our users because the content of the posts will definitely be of much higher quality would you have been able to do this with less friction less resources with an on prem app it would have taken a lot more we would have had to build infrastructure for that so having having it available in azure as a service it's just makes the whole process easy that's fantastic so all you're saying is we've enabled your app to have business insight and have a competitive advantage by moving to azure and have reduced the effort that you would have needed to achieve that absolutely i wanted to recap for the room again what we've done i know we had a lot of things going on we spoke about the two phases assessment and migration we wanted to introduce data migration assistant the tool that is going to help you do the planning it's going to give you rich features recommendation and reporting this tool has assessed two hundred and fifty thousand databases until now and some of those databases had over a million objects in them all i'm trying to say is this tool is ready for you guys to use right now this you saw all UI right now correct it was easier for us to demo that way if you'd shown command line you probably would be not that interesting however we have command line option for all of these and our enterprise partners and customers in our beta program are using these command line options to automate their workflow of managing their database the versioning and the upgrade process the second part was the migration of data itself we spoke about the scripts and writing one off services which become quickly obsolete we have azure data migration service that gives you both SQL oracle mysql as a data source to move all of it to azure data platform it's seamless frictionless and it's going to be working for most all the data types that you can come across it is going to be blazing fast because we have a streaming pattern going and it's going to move terabytes of data in few hours instead of days which is what it takes right now to move finally i wanted to leave you guys with one thought on prem installs we had to worry about backups and patching and monitoring scale out scale up hardware tunings etc with moving ourselves to azure database we are going to not have to worry about any of this but just focus on the app and make our business successful get a competitive advantage get a business inside that wasn't possible as shown by the stack overflow people finally i wanted to wrap this up by pointing out few interesting things data migration services and a limited preview we have a sign up please go and sign up and we'd be happy to onboard you guys and you guys can start using the service we have data migration assistant already available for all you guys to use it's an auto updating app so once you upload it once you download it you don't have to download it again when we give you new iterative releases will come and just update itself so you'll get all the newness all the goodness new features new fixes all of that to make your life that much easier today in the demo we just showed migrating SQL server to SQL database using azure data migration service but we have recorded session of how would you do the same thing with oracle database which includes changing the schema auto updating the schema fixing it up converting it deploying it to azure database and moving the data all of it it's in the video the P four one eight two now if you felt that azure database was not a choice of platform right now for you and you wanted to like for example you have features feature gaps that are blocking you we just announced azure SQL database managed instance this morning that gives you a lift and shift capability and the goodness of cloud best of both the worlds and we have a talk on how you could use azure database management service to migrate your on prem database who manage SQL DB instance finally i wanted to thank all of you again for coming and hearing our story and looking at our tools hopefully it'll make it easier for you guys to do your jobs and make your business and customers and partners easy please give us feedback we are eval and that's the talk tonight i can take questions from all you guys